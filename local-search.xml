<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>yolo训练权重文件</title>
    <link href="/2020/06/02/yolo%E8%AE%AD%E7%BB%83%E6%9D%83%E9%87%8D%E6%96%87%E4%BB%B6/"/>
    <url>/2020/06/02/yolo%E8%AE%AD%E7%BB%83%E6%9D%83%E9%87%8D%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<center><img src="/../images/yologo_2-1591096776746.png" srcset="/img/loading.gif" style="zoom:24%;"></center><p><br><br></p><p>环境：ubuntu 18.04</p><p>平台：darknet/yolo</p><p>工具：yolo、labelImg</p><p>文件目录：</p><pre><code class="hljs gherkin">project|<span class="hljs-string">__backup</span>|__cfg|<span class="hljs-string">__data</span>|<span class="hljs-string"></span>|__images|<span class="hljs-string">__labels</span></code></pre><br><p>yolo权重文件训练流程：</p><p>准备图片 =&gt; 标记图片 =&gt; 配置cfg文件 =&gt; 编写.name文件和.data文件  =&gt;  开始训练  =&gt;  获得权重文件</p><br><ol><li><p>准备图片</p><p>通过下载或者爬虫获取图片</p></li><li><p>标记图片</p></li></ol><ol start="3"><li>配置cfg文件</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>yolo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO初次配置</title>
    <link href="/2020/06/02/YOLO%E5%88%9D%E6%AC%A1%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/06/02/YOLO%E5%88%9D%E6%AC%A1%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<center><img src="/../images/yologo_2-1591069087047.png" srcset="/img/loading.gif" style="zoom:24%;"></center><br><br><br><p>yolo是基于darknet深度学习框架的图像识别工具。这次首次使用在ubuntu 18.04上面安装配置，其主要原因是官方教程也是基于linux下编写的，在windows平台上会有很多不便，进行相关开发的难度和踩坑概率也会大好几倍。</p><ol><li><p>使用yolo首先你要有一个nvidia的显卡，然后安装最新版显卡驱动，重启。</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ubuntu-drivers devices<span class="hljs-variable">$ </span>sudo ubuntu-drivers autoinstall</code></pre><p>然后查看显卡驱动上cuda支持的版本，进入nvidia官方下载安装，这里注意支持的系统版本号。</p><pre><code class="hljs angelscript">https:<span class="hljs-comment">//developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=deblocal</span>$ wget http:<span class="hljs-comment">//developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run</span>$ sudo sh cuda_10<span class="hljs-number">.2</span><span class="hljs-number">.89</span>_440<span class="hljs-number">.33</span><span class="hljs-number">.01</span>_linux.run</code></pre><p>设置cuda的环境变量，打开home下的.bashrc文件添加如下路径，注意cuda安装位置和版本是否一致</p><pre><code class="hljs elixir">export LD_LIBRARY_PATH=<span class="hljs-variable">$LD_LIBRARY_PATH</span><span class="hljs-symbol">:/usr/local/cuda-</span><span class="hljs-number">9.0</span>/lib64export PATH=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/local/cuda-</span><span class="hljs-number">9.0</span>/binexport CUDA_HOME=<span class="hljs-variable">$CUDA_HOME</span><span class="hljs-symbol">:/usr/local/cuda-</span><span class="hljs-number">9.0</span><span class="hljs-variable">$ </span>source ~<span class="hljs-regexp">/.bashrc  #输入命令使其生效</span></code></pre><p>输入下面命令验证是否安装成功</p><pre><code class="hljs ada">$ nvcc <span class="hljs-comment">--version</span></code></pre><p>cudnn安装</p><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//developer.nvidia.com/cudnn</span></code></pre><p>下载后执行下面命令</p><pre><code class="hljs dts">sudo cp cuda<span class="hljs-meta-keyword">/include/</span>cudnn.h <span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/cuda/</span>include/sudo cp cuda<span class="hljs-meta-keyword">/lib64/</span>libcudnn* <span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/cuda/</span>lib64sudo chmod a+r <span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/cuda/</span>include/cudnn.hsudo chmod a+r <span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/cuda/</span>lib64/libcudnn*</code></pre></li><li><p>上面的驱动和环境变量配置好了基础环境就算搭建好了，下面将darknet的项目文件clone到本地</p><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/pjreddie/darknet</code></pre><p>修改Makefile文件</p><pre><code class="hljs ini"><span class="hljs-attr">GPU</span>=<span class="hljs-number">1</span>            <span class="hljs-comment">#GPU加速 1为开启</span><span class="hljs-attr">CUDNN</span>=<span class="hljs-number">1</span> <span class="hljs-comment">#CUDNN开启 </span><span class="hljs-attr">OPENCV</span>=<span class="hljs-number">1</span><span class="hljs-comment">#开启opencv</span><span class="hljs-attr">OPENMP</span>=<span class="hljs-number">0</span><span class="hljs-attr">DEBUG</span>=<span class="hljs-number">0</span></code></pre><p>输入make，开始编译darknet项目</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>make</code></pre><p>到此，yolo的前期准备工作已经完成。</p></li><li><p>运行yolo</p><p>下载官方训练好的权重文件</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>wget <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/pjreddie.com/media</span><span class="hljs-regexp">/files/yolov</span>3.weights</code></pre><p>检测图片</p><pre><code class="hljs haskell">$ ./darknet detect cfg/yolov3.cfg yolov3.weights <span class="hljs-class"><span class="hljs-keyword">data</span>/dog.jpg</span></code></pre><center><img src="/../images/dog.jpg" srcset="/img/loading.gif" style="zoom:33%;"></center><p>usb摄像头识别</p><pre><code class="hljs haskell">$  ./darknet detector demo cfg/coco.<span class="hljs-class"><span class="hljs-keyword">data</span> cfg/yolov3.cfg yolov3.weights</span></code></pre><p>视频文件识别</p><pre><code class="hljs stylus">$ ./darknet detector demo cfg/coco<span class="hljs-selector-class">.data</span> cfg/yolov3<span class="hljs-selector-class">.cfg</span> yolov3<span class="hljs-selector-class">.weights</span> &lt;<span class="hljs-selector-tag">video</span> file&gt;</code></pre></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>YOLO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/01/hello-world/"/>
    <url>/2020/06/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
